/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Article": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch all articles. The articles are sorted by headline. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ArticleReadDTO"][];
                        "application/json": components["schemas"]["ArticleReadDTO"][];
                        "text/json": components["schemas"]["ArticleReadDTO"][];
                    };
                };
            };
        };
        put?: never;
        /** Add an article. Requires authentication. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ArticleAddDTO"];
                    "text/json": components["schemas"]["ArticleAddDTO"];
                    "application/*+json": components["schemas"]["ArticleAddDTO"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Article"];
                        "application/json": components["schemas"]["Article"];
                        "text/json": components["schemas"]["Article"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Article/limit/{limit}/offset/{offset}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Endpoint for pagination. To fetch the first page use offset 0. To fetch the second page use the same offset as the limit. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The maximum of articles to fetch. Can return fewer. */
                    limit: number;
                    /** @description Amount of articles to skip. */
                    offset: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ArticleReadDTO"][];
                        "application/json": components["schemas"]["ArticleReadDTO"][];
                        "text/json": components["schemas"]["ArticleReadDTO"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Article/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch an article by the ID. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the article. */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ArticleReadDTO"];
                        "application/json": components["schemas"]["ArticleReadDTO"];
                        "text/json": components["schemas"]["ArticleReadDTO"];
                    };
                };
            };
        };
        /** Update an article. Any undefined or null fields will write a null to the DB. Requires authentication. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the article to update. */
                    id: number;
                };
                cookie?: never;
            };
            /** @description The updated article. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Article"];
                    "text/json": components["schemas"]["Article"];
                    "application/*+json": components["schemas"]["Article"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an article by the ID. Requires authentication. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id the of the article to delete. */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Article/search/{searchWord}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find articles where the headline contains the search word. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Word to search for. Case insensitive. */
                    searchWord: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ArticleReadDTO"][];
                        "application/json": components["schemas"]["ArticleReadDTO"][];
                        "text/json": components["schemas"]["ArticleReadDTO"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enter username and password and get a random token. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Login object */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LoginDTO"];
                    "text/json": components["schemas"]["LoginDTO"];
                    "application/*+json": components["schemas"]["LoginDTO"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Article: {
            /** Format: int64 */
            id?: number;
            headline?: string | null;
            /** @description Image shown at the top of article */
            mainPictureUrl?: string | null;
            authorPictureUrl?: string | null;
            /** @description Small teaser for the article. Should be no longer than 300 chars. */
            articleTeaser?: string | null;
            /** @description Main text of the article. Can contain HTML */
            articleText?: string | null;
            /** @description Whether or not the article has a paywall. If the article does have a paywall, ArticleText is not included
             *     when not logged in. */
            paywall?: boolean;
            /** Format: date-time */
            createTime?: string;
        };
        ArticleAddDTO: {
            headline?: string | null;
            /** @description Image shown at the top of article */
            mainPictureUrl?: string | null;
            authorPictureUrl?: string | null;
            /** @description Small teaser for the article. Should be no longer than 300 chars. */
            articleTeaser?: string | null;
            /** @description Main text of the article. Can contain HTML */
            articleText?: string | null;
        };
        ArticleReadDTO: {
            /** Format: int64 */
            id?: number;
            headline?: string | null;
            /** @description Image shown at the top of article */
            mainPictureUrl?: string | null;
            authorPictureUrl?: string | null;
            /** @description Small teaser for the article. Should be no longer than 300 chars. */
            articleTeaser?: string | null;
            /** @description Main text of the article. Can contain HTML. Will be null if article has paywall and user is not logged in. */
            articleText?: string | null;
            /** @description Whether or not the article has a paywall. If the article does have a paywall, ArticleText is not included
             *     when not logged in. */
            paywall?: boolean;
            /** Format: date-time */
            createTime?: string;
        };
        LoginDTO: {
            /** Format: int64 */
            id?: number;
            username?: string | null;
            password?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
